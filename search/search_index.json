{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kprobe and eBPF in rust \u53c2\u8003 http://hm1229.top/rust_ebpf_book/book/index.html https://github.com/latte-c/rCore/tree/bpf/kernel/docs https://github.com/NickCao/ebpf-rs https://www.kernel.org/doc/html/latest/trace/kprobes.html https://livingshade.github.io/ebpf-doc/","title":"kprobe and eBPF in rust"},{"location":"#kprobe-and-ebpf-in-rust","text":"","title":"kprobe and eBPF in rust"},{"location":"#_1","text":"http://hm1229.top/rust_ebpf_book/book/index.html https://github.com/latte-c/rCore/tree/bpf/kernel/docs https://github.com/NickCao/ebpf-rs https://www.kernel.org/doc/html/latest/trace/kprobes.html https://livingshade.github.io/ebpf-doc/","title":"\u53c2\u8003"},{"location":"async-probe/","text":"async\u51fd\u6570\u8ddf\u8e2a\u603b\u7ed3 \u4e00\u4e9b\u53c2\u8003 \u5173\u4e8erust async\u7684\u5f88\u597d\u7684\u4ecb\u7ecd\uff1a https://night-cruise.github.io/async-rust/ async rust debugging\u7684tracking issue\uff1a https://github.com/rust-lang/rust/issues/73522 async\u51fd\u6570\u7684\u8ddf\u8e2a\u601d\u8def stacktrace \u5728\u6b63\u5728\u6267\u884c\u7684async\u51fd\u6570\u91cc\uff0c\u53ef\u4ee5\u7528\u6808\u5e27\u76f4\u63a5\u8fdb\u884cstacktrace\uff0c\u4e0e\u6b63\u5e38\u51fd\u6570\u4e00\u6837\u3002\u5982\u679c\u60f3\u8981\u5b8c\u6574\u7684\u8c03\u7528\u94fe\u53ef\u4ee5\u5f15\u5165debuginfo\u83b7\u53d6inline\u51fd\u6570\u7684\u4fe1\u606f\u3002 \u5f97\u5230\u7684\u7b26\u53f7\u548c\u4e00\u822c\u51fd\u6570\u4f1a\u6709\u533a\u522b\uff0c\u51fd\u6570\u4e3b\u4f53\u7684\u7b26\u53f7\u4f1a\u53d8\u6210\u95ed\u5305\uff0c\u4e5f\u4f1a\u51fa\u73b0poll\u51fd\u6570\u7684\u7b26\u53f7\u4ee5\u53ca\u4f7f\u7528\u7684async runtime\u7684\u76f8\u5173\u51fd\u6570\u3002 \u5982\u679c\u60f3\u589e\u5f3a\u8fd9\u4e9b\u7b26\u53f7\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u4ee5\u52a0\u5165\u7f16\u8bd1\u9009\u9879 -Csymbol-mangling-version=v0 \uff0c\u8fd9\u4e2aRFC\u4e5f\u4f1a\u8ba9\u5176\u4ed6\u51fd\u6570\u7684\u7b26\u53f7\u66f4\u52a0\u53ef\u8bfb\u3002 \u5728\u6700\u65b0\u7684\u7f16\u8bd1\u5668\u7248\u672c\u91cc\uff0casync\u51fd\u6570\u751f\u6210\u65f6\u4e0d\u518d\u7ecf\u8fc7\u4e00\u5c42Genfuture\uff0c\u4ece\u800cstacktrace\u66f4\u52a0\u7b80\u6d01(https://github.com/rust-lang/rust/pull/104321)\u3002 \u5982\u679c\u8981\u8ddf\u8e2a\u5df2\u7ecfyield\u7684async\u51fd\u6570\u5c31\u4e0d\u80fd\u901a\u8fc7\u6808\u8ffd\u8e2a\u7684\u65b9\u5f0f\u4e86\u3002\u6808\u91cc\u662f\u6ca1\u6709\u6302\u8d77\u7684\u534f\u7a0b\u7684\u6267\u884c\u4fe1\u606f\u7684\u3002\u8ffd\u8e2a\u6302\u8d77\u7684\u51fd\u6570\u6709\u51e0\u79cd\u601d\u8def\uff1a \u9759\u6001\u8ffd\u8e2a\u70b9 \u5728async\u51fd\u6570\u4ee3\u7801\u91cc\u63d2\u5165\u9759\u6001\u8ffd\u8e2a\u70b9\u662f\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u3002tokio\u7684 async-backtrace \u5c31\u662f\u8fd9\u4e48\u5b9e\u73b0\u7684\u3002\u7ed9\u6bcf\u4e2aasync\u51fd\u6570\u7528\u5b8f\u5728\u5916\u9762\u5957\u4e00\u5c42async\u51fd\u6570\uff0c\u5728poll\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u5957\u7684async\u51fd\u6570\u91cc\u7684poll\u83b7\u53d6\u7ed3\u679c\uff0c\u6c47\u62a5\u7ed9\u5168\u5c40tracer\u5904\u7406\u5373\u53ef\u3002\u5728async\u51fd\u6570\u4e0a\u52a0\u5165\u5bf9\u5e94\u7684\u8ddf\u8e2a\u5b8f\u5373\u53ef\u81ea\u52a8\u6c47\u62a5\u4ed6\u4eec\u7684\u6267\u884c\u60c5\u51b5\u3002 \u4f46\u662f\u4ecekprobe\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4e0d\u4fee\u6539\u4ee3\u7801\uff0c\u4ec5\u4f9d\u8d56\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u4fe1\u606f\u5b9a\u4f4dasync\u51fd\u6570\u7684\u6267\u884c\u6d41\u8fdb\u884c\u63d2\u6869\uff0c\u4e5f\u5c31\u662f\u52a8\u6001\u7684\u8ddf\u8e2a\u4e00\u4e2aasync\u51fd\u6570\u662f\u5426\u6267\u884c\u5b8c\u6bd5\uff0c\u662f\u5426\u5728Yield\u4e2d\u3002 \u5728\u76ee\u524d\u7684\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u7ed3\u679c\u4e0b\uff0c\u6709\u51e0\u79cd\u601d\u8def\uff1a \u8ddf\u8e2apoll\u51fd\u6570 \u5bf9poll\u51fd\u6570\u8fdb\u884c\u63d2\u6869\uff0c\u7528retprobe\u622a\u53d6\u8fd4\u56de\u503c\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2afuture\u662f\u5426\u5b8c\u6210\u7684\uff0c\u4f46\u662f\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u4f7f\u7528.await\u751f\u6210\u7684poll\u51fd\u6570\u4f1a\u751f\u6210\u6bd4\u8f83\u590d\u6742\u7684\u7b26\u53f7\uff0c\u751f\u6210\u7684\u7ed3\u679c\u8fd8\u548c\u5177\u4f53async\u5b9e\u73b0\u6709\u5173\uff0c\u9700\u8981\u624b\u52a8\u53bbdwarf\u91cc\u67e5\u627e\uff0c\u5f88\u96be\u76f4\u63a5\u4ece\u539f\u672c\u7684async\u51fd\u6570\u540d\u91cc\u83b7\u53d6\uff08\u6216\u8005\u8bf4\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1aemit\u8fd9\u7c7b\u4fe1\u606f\uff09\uff0c\u4e4b\u524d\u9759\u6001\u63d2\u6869\u5c31\u662f\u901a\u8fc7\u63d2\u5165\u4ee3\u7801\u83b7\u53d6\u4e86\u8fd9\u4e2a\u4fe1\u606f\u3002 .await\u751f\u6210\u7684poll\u51fd\u6570\u5f88\u53ef\u80fd\u88abinline\u4f18\u5316\u6389\uff0cretprobe\u65e0\u6cd5\u83b7\u53d6\u8fd4\u56de\u503c\uff0c\u83b7\u53d6\u7684\u4fe1\u606f\u6709\u9650\u3002 \u5bf9\u4e8e\u975eleaf\u7684future\uff0c\u53ea\u80fd\u5224\u65ad\u4ed6\u662f\u5426\u5b8c\u6210\uff0c\u65e0\u6cd5\u77e5\u9053\u72b6\u6001\u673a\u7684\u5177\u4f53\u72b6\u6001\uff0c\u800c\u9012\u5f52\u63d2\u6869\u5b50future\u8fd8\u662f\u9700\u8981\u7f16\u8bd1\u5668\u7684\u4fe1\u606f\u3002 \u5982\u679c\u60f3\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6df1\u5165\u5230\u51fd\u6570\u7684\u5177\u4f53\u6267\u884c\u6d41\u91cc\uff0c\u4e5f\u5c31\u662f\u5c1d\u8bd5\u901a\u8fc7\u8ddf\u8e2a\u95ed\u5305\u6765\u5b9e\u73b0\u3002 \u8ddf\u8e2a\u751f\u6210\u7684\u95ed\u5305 \u6211\u4eec\u53ef\u4ee5\u4eceDWARF\u91cc\u627e\u5230async/await\u751f\u6210\u7684struct\uff1a struct example::what::{async_fn_env#0} size: 3 members: 0[1] __state: u8 0[3] <variant part> Unresumed: <0> Returned: <1> Panicked: <2>+ Suspend0: <3> 0[1] <padding> 1[2] __awaitee: struct example::barrr::{async_fn_env#0} Suspend1: <4> 0[1] <padding> 1[1] __awaitee: struct example::baz::{async_fn_env#0} 2[1] <padding> \u5bf9\u5e94\uff08\u65e7\u7248\uff09\u7f16\u8bd1\u5668\u91cc\u7684\u903b\u8f91\uff1a /// Desugar `<expr>.await` into: /// ```ignore (pseudo-rust) /// match ::std::future::IntoFuture::into_future(<expr>) { /// mut __awaitee => loop { /// match unsafe { ::std::future::Future::poll( /// <::std::pin::Pin>::new_unchecked(&mut __awaitee), /// ::std::future::get_context(task_context), /// ) } { /// ::std::task::Poll::Ready(result) => break result, /// ::std::task::Poll::Pending => {} /// } /// task_context = yield (); /// } /// } /// ``` \u8fd9\u4e5f\u662f\u4e3a\u4e86\u6539\u5584async\u51fd\u6570\u7684debug\u652f\u6301\u800c\u5bf9\u7f16\u8bd1\u5668\u505a\u7684\u6539\u52a8\u4e4b\u4e00 https://github.com/rust-lang/rust/pull/95011 \u3002 \u6bcf\u4e2aSuspend\u5c31\u662f\u4e00\u53e5await\u8bed\u53e5\uff0cawaitee\u5c31\u5bf9\u5e94\u4e86\u5b50future\u3002\u6240\u4ee5\u53ef\u4ee5\u4ecedebuginfo\u91cc\u89e3\u6790\u51fa\u4ee3\u7801\u91ccfuture\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u6709\u4f9d\u8d56\u6811\u4ee5\u540e\u53ef\u4ee5\u8003\u8651\u6839\u636e\u95ed\u5305\u7684\u6267\u884c\u60c5\u51b5\u8ddf\u8e2a\u3002\u4e0d\u8fc7\u4ecd\u7136\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u8fd9\u4e2a\u7ed3\u6784\u4ec5\u9650\u4e8eawait\u8bed\u53e5\uff0c\u5982\u679c\u4f7f\u7528select!\u6216\u8005join!\u7b49\u5b8f\u6216\u662f\u624b\u52a8\u5b9e\u73b0Future\u7684\u8bdd\uff0c\u4f1a\u6784\u9020\u65b0\u7684future\u800c\u4e0d\u662f\u4f7f\u7528await\uff0c\u8fd9\u6837\u7684await\u6811\u53ef\u80fd\u4f1a\u65ad\u5f00\u3002 \u7528trait\u62bd\u8c61\u51fa\u7684awaitee\u662f\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u5206\u6790\u83b7\u53d6\u7684\u3002 \u5982\u679c\u4e00\u4e2aclosure\u88abinline\u7684\u8bdd\u4ecd\u7136\u6ca1\u6cd5\u901a\u8fc7retprobe\u77e5\u9053\u5177\u4f53\u7684\u6267\u884c\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u4e48\u89e3\u6790\u51fa\u7684\u4f9d\u8d56\u5173\u7cfb\u4e5f\u4e0d\u662f\u5b8c\u6574\u7684\uff0c\u5c31\u7b97\u662f\u5b8c\u6574\u7684\u4e5f\u6ca1\u529e\u6cd5\u76f4\u63a5\u8ffd\u8e2a\u3002 \u5199\u4e86\u4e00\u4e2a\u5c0f\u5de5\u5177 https://github.com/cubele/rust-async-tree-parser \u7528\u6765\u53ef\u89c6\u5316\u8fd9\u4e2a\u4f9d\u8d56\u6811\uff0c\u4ee5zCore\u4e3a\u4f8b\uff1a \u53ef\u4ee5\u770b\u5230read\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u91cc\u9762await\u7684future\u88ab\u62bd\u8c61\u4e86\uff0c\u6240\u4ee5\u4f9d\u8d56\u6811\u627e\u4e0d\u5230\u5b9e\u4f53\u7684future\u3002 \u518d\u6bd4\u5982join!\u7684\u60c5\u51b5\uff1a \u88abjoin\u7684await\u903b\u8f91\u548cjoin\u672c\u8eab\u5206\u79bb\u4e86\u3002 \u6240\u4ee5\u8bf4async\u51fd\u6570\u6839\u672c\u7684\u6267\u884c\u60c5\u51b5\u8fd8\u662f\u8981\u901a\u8fc7poll\u83b7\u53d6\u7684\u3002 \u4ec5\u8ddf\u8e2aleaf future __awaitee\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u627e\u5230.await\u751f\u6210\u7684\u7ed3\u6784\uff0c\u4f46\u4f1a\u5728\u4e00\u4e9b\u6ca1\u6709\u4f7f\u7528await\u7684Future\u5904\u65ad\u5f00\u3002\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u65ad\u5f00\u7684\u5730\u65b9\u80af\u5b9a\u662f\u4ee3\u7801\uff08\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\u901a\u8fc7.await\uff09\u5b9e\u73b0\u4e86Future\u5bf9\u5e94\u7684poll\u51fd\u6570\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\"leaf\"\u7684poll\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u63d2\u6869\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u9000\u4e00\u6b65\uff0c\u4e0d\u53bb\u81ea\u9876\u5411\u4e0b\u7684\u5173\u6ce8async\u51fd\u6570\u7684\u6574\u4f53\u6d41\u7a0b\uff0c\u800c\u662f\u89c2\u6d4b\u4e00\u4e9b\u5173\u952e\u7684poll\u51fd\u6570\u3002\u56e0\u4e3aasync\u771f\u6b63\u7684\u5f02\u6b65\u4e00\u822c\u90fd\u51fa\u73b0\u5728\u8fd9\u79cd\u5e95\u5c42Future\u91cc\uff0c\u8fd9\u6837\u8ddf\u8e2a\u5df2\u7ecf\u53ef\u4ee5\u83b7\u53d6\u8db3\u591f\u7684\u4fe1\u606f\u4e86\u3002 \u65e2\u7136\u6211\u4eec\u76f4\u63a5\u8ddf\u8e2a\u5177\u4f53\u5b9e\u73b0\u7684\u4e00\u4e2apoll\u51fd\u6570\uff0c\u63d2\u6869\u7684\u65f6\u5019\u5c31\u6ca1\u6709\u4e4b\u524d\u7684\u95ee\u9898\u4e86\u3002\u4e0d\u8fc7\u83b7\u53d6\u8fd4\u56de\u503c\u7684\u8bdd\u53ef\u80fd\u8fd8\u662f\u9700\u8981no_inline\u3002 \u800c\u5982\u679c\u5173\u6ce8\u7684\u4e0d\u662fFuture\u800c\u662fasync\u51fd\u6570\u672c\u8eab\u7684\u6267\u884c\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u51fd\u6570\u751f\u6210\u7684\u95ed\u5305\u4e0a\u63d2\u6869\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u7528line2addr\u5b9a\u4f4d\u5177\u4f53\u7684\u4e00\u53e5\u8bdd\u63d2\u6869\u3002 \u6362\u4e00\u4e2a\u89d2\u5ea6 \u65e2\u7136\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u4e2astruct\u7684\u7ed3\u6784\uff0c\u5982\u679c\u80fd\u5728\u5806\u4e0a\u627e\u5230\u4ed6\u7684\u8bdd\u5c31\u53ef\u4ee5\u76f4\u63a5\u77e5\u9053async\u51fd\u6570\u7684\u6267\u884c\u60c5\u51b5\u4e86\u3002 \u8fd9\u4e48\u505a\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\uff1a\u53ef\u4ee5\u6839\u636estruct\u7684\u5730\u5740\u533a\u522b\u4e0d\u540c\u7684\u534f\u7a0b\u5b9e\u4f8b\uff0c\u66f4\u65b9\u4fbf\u7edf\u8ba1\u6267\u884c\u60c5\u51b5\u3002 \u6211\u80fd\u60f3\u5230\u7684\u65b9\u6cd5\u53ea\u6709\u7528jprobe\u6355\u83b7poll\u51fd\u6570\u7684\u5165\u53c2\uff0c\u4e0d\u8fc7\u8fd9\u4e5f\u662f\u5f88\u56f0\u96be\u7684\uff0c\u4e00\u662f\u4e4b\u524d\u8bf4\u7684async\u751f\u6210\u7684poll\u51fd\u6570\u5e76\u4e0d\u597d\u5b9a\u4f4d\uff0c\u4e8c\u662frust\u91cc\u9762\u7684jprobe\u770b\u8d77\u6765\u4f1a\u6bd4C\u7684\u5b9e\u73b0\u96be\u5f88\u591a\u3002 \u4e00\u4e2a\u4f8b\u5b50 zCore\u4e2d\u7684SleepFuture\u7684poll\u51fd\u6570\u6ca1\u6709\u88abinline\uff0c\u76f4\u63a5\u53ef\u4ee5\u5728\u7b26\u53f7\u8868\u91cc\u627e\u5230 <kernel_hal::common::future::SleepFuture as core::future::future::Future>::poll \uff0c\u63d2\u6869\u4ee5\u540e\u53ef\u4ee5\u770b\u5230Waker\u89e6\u53d1\u524d\u540e\u4e24\u6b21poll\u5206\u522b\u8fd4\u56dePending\u548cReady\u3002 \u603b\u7ed3 \u5982\u679c\u662f\u4f5c\u4e3adebug\u624b\u6bb5\u7684\u8bdd\uff0c\u7528async-backtrace\u8fd9\u4e2a\u5e93\u63d2\u5165\u9759\u6001\u8ffd\u8e2a\u70b9\u80af\u5b9a\u662f\u6700\u597d\u7684\u529e\u6cd5\u3002\u800c\u52a8\u6001\u8ddf\u8e2aasync\u51fd\u6570\u5177\u4f53\u7684\u6267\u884c\u60c5\u51b5\u60c5\u51b5\u6bd4\u8f83\u56f0\u96be\uff0c\u6839\u672c\u539f\u56e0\u662f\u7f16\u8bd1\u5668\u6ca1\u6709\u505a\u76f8\u5173\u7684debuginfo\u3002\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u89e3\u6790\u7f16\u8bd1\u5668emit\u7684awaitee\u4fe1\u606f\u627e\u5230\u627e\u5230leaf future\uff0c\u5b9a\u4f4d\u5176\u4e2d\u663e\u5f0f\u5b9e\u73b0\u7684poll\u51fd\u6570\uff0c\u5bf9\u8fd9\u4e9bpoll\u8fdb\u884cprobe\uff0c\u4e0e\u63d2\u6869closure\u7ed3\u5408\u5224\u65ad\u6267\u884c\u8fc7\u7a0b\u3002 \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u770b\uff0c.await\u751f\u6210\u7684poll\u4f9d\u8d56\u5e76\u4e0d\u662fprobe\u52a8\u6001\u8ddf\u8e2a\u6700\u5173\u5fc3\u7684\u90e8\u5206\uff0c\u5173\u952e\u7684\u662f\u53ef\u80fd\u963b\u585e\u7684\u5e95\u5c42Future\u3002\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u5bf9await\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u52a8\u6001\u8ffd\u8e2a\uff08\u7f16\u8bd1\u5668\u76ee\u524d\u4e5f\u6ca1\u6709\u652f\u6301\uff09\uff0c\u5728debug\u7684\u65f6\u5019\u7528\u9759\u6001\u63d2\u6869\u5c31\u8db3\u591f\u4e86\u3002 \u5982\u679c\u771f\u7684\u8981\u505a\u5230\u5b8c\u6574\u7684\u52a8\u6001\u63d2\u6869\uff0c\u52a0\u5165\u7f16\u8bd1\u5668\u652f\u6301\u4ee5\u540e\u4f7f\u7528jprobe\u5e94\u8be5\u662f\u6700\u53ef\u884c\u7684\u505a\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\u6211\u4eec\u8981\u77e5\u9053async\u51fd\u6570\u751f\u6210\u7684Future\u91cc\u9762\u7684poll\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u5177\u4f53\u7684\u53c2\u6570\u7c7b\u578b\uff08\u72b6\u6001\u673a\u5bf9\u5e94\u7684struct\u7ed3\u6784\uff09\uff0c\u7136\u540e\u5728\u5bf9\u5e94\u7684\u5730\u5740\u63d2\u5165jprobe\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2astruct\uff0c\u4ece\u800c\u6bcf\u6b21poll\u4ee5\u540estruct\u66f4\u65b0\u7684\u72b6\u6001\u90fd\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u3002 \u73b0\u5728\u4e0d\u80fd\u5b9e\u73b0\u7684\u539f\u56e0\u662f\uff1a \u76ee\u524d\u8fd9\u4e2astruct\u7684\u7ed3\u6784\u53ea\u6709\u5728\u7f16\u8bd1\u540e\u624d\u53ef\u4ee5\u770b\u5230\uff0c\u53ef\u80fd\u8981\u7528\u522b\u7684\u624b\u6bb5\u5b9e\u73b0jprobe\u7684handler async\u51fd\u6570\u751f\u6210\u7684poll\u51fd\u6570\u7684\u5730\u5740\u5728debuginfo\u91cc\u9762\u4e0d\u592a\u597d\u627e\uff0c\u9700\u8981\u7f16\u8bd1\u5668\u652f\u6301 rust\u60f3\u8981\u5b9e\u73b0jprobe\u53ef\u80fd\u4f1a\u6bd4\u8f83\u590d\u6742\u3002 \u56e0\u4e3aasync rust\u5e76\u4e0d\u6210\u719f\uff0c\u76f8\u5173\u7684\u7f16\u8bd1\u6d41\u7a0b\u4ee5\u53cadebug\u652f\u6301\u90fd\u5728\u4e0d\u65ad\u7684\u6539\u8fdb\u4e2d\u3002debuginfo\u53ef\u4ee5\u5173\u6ce8tracking issue https://github.com/rust-lang/rust/issues/73522 \uff0casync\u51fd\u6570\u7684\u7f16\u8bd1\u8fc7\u7a0b\u6539\u8fdb\u53ef\u4ee5\u770b\u770b https://swatinem.de/blog/improving-async-codegen/ \u3002","title":"async\u51fd\u6570\u8ddf\u8e2a\u603b\u7ed3"},{"location":"async-probe/#async","text":"","title":"async\u51fd\u6570\u8ddf\u8e2a\u603b\u7ed3"},{"location":"async-probe/#_1","text":"\u5173\u4e8erust async\u7684\u5f88\u597d\u7684\u4ecb\u7ecd\uff1a https://night-cruise.github.io/async-rust/ async rust debugging\u7684tracking issue\uff1a https://github.com/rust-lang/rust/issues/73522","title":"\u4e00\u4e9b\u53c2\u8003"},{"location":"async-probe/#async_1","text":"","title":"async\u51fd\u6570\u7684\u8ddf\u8e2a\u601d\u8def"},{"location":"async-probe/#stacktrace","text":"\u5728\u6b63\u5728\u6267\u884c\u7684async\u51fd\u6570\u91cc\uff0c\u53ef\u4ee5\u7528\u6808\u5e27\u76f4\u63a5\u8fdb\u884cstacktrace\uff0c\u4e0e\u6b63\u5e38\u51fd\u6570\u4e00\u6837\u3002\u5982\u679c\u60f3\u8981\u5b8c\u6574\u7684\u8c03\u7528\u94fe\u53ef\u4ee5\u5f15\u5165debuginfo\u83b7\u53d6inline\u51fd\u6570\u7684\u4fe1\u606f\u3002 \u5f97\u5230\u7684\u7b26\u53f7\u548c\u4e00\u822c\u51fd\u6570\u4f1a\u6709\u533a\u522b\uff0c\u51fd\u6570\u4e3b\u4f53\u7684\u7b26\u53f7\u4f1a\u53d8\u6210\u95ed\u5305\uff0c\u4e5f\u4f1a\u51fa\u73b0poll\u51fd\u6570\u7684\u7b26\u53f7\u4ee5\u53ca\u4f7f\u7528\u7684async runtime\u7684\u76f8\u5173\u51fd\u6570\u3002 \u5982\u679c\u60f3\u589e\u5f3a\u8fd9\u4e9b\u7b26\u53f7\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u4ee5\u52a0\u5165\u7f16\u8bd1\u9009\u9879 -Csymbol-mangling-version=v0 \uff0c\u8fd9\u4e2aRFC\u4e5f\u4f1a\u8ba9\u5176\u4ed6\u51fd\u6570\u7684\u7b26\u53f7\u66f4\u52a0\u53ef\u8bfb\u3002 \u5728\u6700\u65b0\u7684\u7f16\u8bd1\u5668\u7248\u672c\u91cc\uff0casync\u51fd\u6570\u751f\u6210\u65f6\u4e0d\u518d\u7ecf\u8fc7\u4e00\u5c42Genfuture\uff0c\u4ece\u800cstacktrace\u66f4\u52a0\u7b80\u6d01(https://github.com/rust-lang/rust/pull/104321)\u3002 \u5982\u679c\u8981\u8ddf\u8e2a\u5df2\u7ecfyield\u7684async\u51fd\u6570\u5c31\u4e0d\u80fd\u901a\u8fc7\u6808\u8ffd\u8e2a\u7684\u65b9\u5f0f\u4e86\u3002\u6808\u91cc\u662f\u6ca1\u6709\u6302\u8d77\u7684\u534f\u7a0b\u7684\u6267\u884c\u4fe1\u606f\u7684\u3002\u8ffd\u8e2a\u6302\u8d77\u7684\u51fd\u6570\u6709\u51e0\u79cd\u601d\u8def\uff1a","title":"stacktrace"},{"location":"async-probe/#_2","text":"\u5728async\u51fd\u6570\u4ee3\u7801\u91cc\u63d2\u5165\u9759\u6001\u8ffd\u8e2a\u70b9\u662f\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u3002tokio\u7684 async-backtrace \u5c31\u662f\u8fd9\u4e48\u5b9e\u73b0\u7684\u3002\u7ed9\u6bcf\u4e2aasync\u51fd\u6570\u7528\u5b8f\u5728\u5916\u9762\u5957\u4e00\u5c42async\u51fd\u6570\uff0c\u5728poll\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u5957\u7684async\u51fd\u6570\u91cc\u7684poll\u83b7\u53d6\u7ed3\u679c\uff0c\u6c47\u62a5\u7ed9\u5168\u5c40tracer\u5904\u7406\u5373\u53ef\u3002\u5728async\u51fd\u6570\u4e0a\u52a0\u5165\u5bf9\u5e94\u7684\u8ddf\u8e2a\u5b8f\u5373\u53ef\u81ea\u52a8\u6c47\u62a5\u4ed6\u4eec\u7684\u6267\u884c\u60c5\u51b5\u3002 \u4f46\u662f\u4ecekprobe\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4e0d\u4fee\u6539\u4ee3\u7801\uff0c\u4ec5\u4f9d\u8d56\u7f16\u8bd1\u5668\u7ed9\u51fa\u7684\u4fe1\u606f\u5b9a\u4f4dasync\u51fd\u6570\u7684\u6267\u884c\u6d41\u8fdb\u884c\u63d2\u6869\uff0c\u4e5f\u5c31\u662f\u52a8\u6001\u7684\u8ddf\u8e2a\u4e00\u4e2aasync\u51fd\u6570\u662f\u5426\u6267\u884c\u5b8c\u6bd5\uff0c\u662f\u5426\u5728Yield\u4e2d\u3002 \u5728\u76ee\u524d\u7684\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u7ed3\u679c\u4e0b\uff0c\u6709\u51e0\u79cd\u601d\u8def\uff1a","title":"\u9759\u6001\u8ffd\u8e2a\u70b9"},{"location":"async-probe/#poll","text":"\u5bf9poll\u51fd\u6570\u8fdb\u884c\u63d2\u6869\uff0c\u7528retprobe\u622a\u53d6\u8fd4\u56de\u503c\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2afuture\u662f\u5426\u5b8c\u6210\u7684\uff0c\u4f46\u662f\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u4f7f\u7528.await\u751f\u6210\u7684poll\u51fd\u6570\u4f1a\u751f\u6210\u6bd4\u8f83\u590d\u6742\u7684\u7b26\u53f7\uff0c\u751f\u6210\u7684\u7ed3\u679c\u8fd8\u548c\u5177\u4f53async\u5b9e\u73b0\u6709\u5173\uff0c\u9700\u8981\u624b\u52a8\u53bbdwarf\u91cc\u67e5\u627e\uff0c\u5f88\u96be\u76f4\u63a5\u4ece\u539f\u672c\u7684async\u51fd\u6570\u540d\u91cc\u83b7\u53d6\uff08\u6216\u8005\u8bf4\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1aemit\u8fd9\u7c7b\u4fe1\u606f\uff09\uff0c\u4e4b\u524d\u9759\u6001\u63d2\u6869\u5c31\u662f\u901a\u8fc7\u63d2\u5165\u4ee3\u7801\u83b7\u53d6\u4e86\u8fd9\u4e2a\u4fe1\u606f\u3002 .await\u751f\u6210\u7684poll\u51fd\u6570\u5f88\u53ef\u80fd\u88abinline\u4f18\u5316\u6389\uff0cretprobe\u65e0\u6cd5\u83b7\u53d6\u8fd4\u56de\u503c\uff0c\u83b7\u53d6\u7684\u4fe1\u606f\u6709\u9650\u3002 \u5bf9\u4e8e\u975eleaf\u7684future\uff0c\u53ea\u80fd\u5224\u65ad\u4ed6\u662f\u5426\u5b8c\u6210\uff0c\u65e0\u6cd5\u77e5\u9053\u72b6\u6001\u673a\u7684\u5177\u4f53\u72b6\u6001\uff0c\u800c\u9012\u5f52\u63d2\u6869\u5b50future\u8fd8\u662f\u9700\u8981\u7f16\u8bd1\u5668\u7684\u4fe1\u606f\u3002 \u5982\u679c\u60f3\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u9700\u8981\u6df1\u5165\u5230\u51fd\u6570\u7684\u5177\u4f53\u6267\u884c\u6d41\u91cc\uff0c\u4e5f\u5c31\u662f\u5c1d\u8bd5\u901a\u8fc7\u8ddf\u8e2a\u95ed\u5305\u6765\u5b9e\u73b0\u3002","title":"\u8ddf\u8e2apoll\u51fd\u6570"},{"location":"async-probe/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u4eceDWARF\u91cc\u627e\u5230async/await\u751f\u6210\u7684struct\uff1a struct example::what::{async_fn_env#0} size: 3 members: 0[1] __state: u8 0[3] <variant part> Unresumed: <0> Returned: <1> Panicked: <2>+ Suspend0: <3> 0[1] <padding> 1[2] __awaitee: struct example::barrr::{async_fn_env#0} Suspend1: <4> 0[1] <padding> 1[1] __awaitee: struct example::baz::{async_fn_env#0} 2[1] <padding> \u5bf9\u5e94\uff08\u65e7\u7248\uff09\u7f16\u8bd1\u5668\u91cc\u7684\u903b\u8f91\uff1a /// Desugar `<expr>.await` into: /// ```ignore (pseudo-rust) /// match ::std::future::IntoFuture::into_future(<expr>) { /// mut __awaitee => loop { /// match unsafe { ::std::future::Future::poll( /// <::std::pin::Pin>::new_unchecked(&mut __awaitee), /// ::std::future::get_context(task_context), /// ) } { /// ::std::task::Poll::Ready(result) => break result, /// ::std::task::Poll::Pending => {} /// } /// task_context = yield (); /// } /// } /// ``` \u8fd9\u4e5f\u662f\u4e3a\u4e86\u6539\u5584async\u51fd\u6570\u7684debug\u652f\u6301\u800c\u5bf9\u7f16\u8bd1\u5668\u505a\u7684\u6539\u52a8\u4e4b\u4e00 https://github.com/rust-lang/rust/pull/95011 \u3002 \u6bcf\u4e2aSuspend\u5c31\u662f\u4e00\u53e5await\u8bed\u53e5\uff0cawaitee\u5c31\u5bf9\u5e94\u4e86\u5b50future\u3002\u6240\u4ee5\u53ef\u4ee5\u4ecedebuginfo\u91cc\u89e3\u6790\u51fa\u4ee3\u7801\u91ccfuture\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u6709\u4f9d\u8d56\u6811\u4ee5\u540e\u53ef\u4ee5\u8003\u8651\u6839\u636e\u95ed\u5305\u7684\u6267\u884c\u60c5\u51b5\u8ddf\u8e2a\u3002\u4e0d\u8fc7\u4ecd\u7136\u6709\u51e0\u4e2a\u95ee\u9898\uff1a \u8fd9\u4e2a\u7ed3\u6784\u4ec5\u9650\u4e8eawait\u8bed\u53e5\uff0c\u5982\u679c\u4f7f\u7528select!\u6216\u8005join!\u7b49\u5b8f\u6216\u662f\u624b\u52a8\u5b9e\u73b0Future\u7684\u8bdd\uff0c\u4f1a\u6784\u9020\u65b0\u7684future\u800c\u4e0d\u662f\u4f7f\u7528await\uff0c\u8fd9\u6837\u7684await\u6811\u53ef\u80fd\u4f1a\u65ad\u5f00\u3002 \u7528trait\u62bd\u8c61\u51fa\u7684awaitee\u662f\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u5206\u6790\u83b7\u53d6\u7684\u3002 \u5982\u679c\u4e00\u4e2aclosure\u88abinline\u7684\u8bdd\u4ecd\u7136\u6ca1\u6cd5\u901a\u8fc7retprobe\u77e5\u9053\u5177\u4f53\u7684\u6267\u884c\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u4e48\u89e3\u6790\u51fa\u7684\u4f9d\u8d56\u5173\u7cfb\u4e5f\u4e0d\u662f\u5b8c\u6574\u7684\uff0c\u5c31\u7b97\u662f\u5b8c\u6574\u7684\u4e5f\u6ca1\u529e\u6cd5\u76f4\u63a5\u8ffd\u8e2a\u3002 \u5199\u4e86\u4e00\u4e2a\u5c0f\u5de5\u5177 https://github.com/cubele/rust-async-tree-parser \u7528\u6765\u53ef\u89c6\u5316\u8fd9\u4e2a\u4f9d\u8d56\u6811\uff0c\u4ee5zCore\u4e3a\u4f8b\uff1a \u53ef\u4ee5\u770b\u5230read\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u91cc\u9762await\u7684future\u88ab\u62bd\u8c61\u4e86\uff0c\u6240\u4ee5\u4f9d\u8d56\u6811\u627e\u4e0d\u5230\u5b9e\u4f53\u7684future\u3002 \u518d\u6bd4\u5982join!\u7684\u60c5\u51b5\uff1a \u88abjoin\u7684await\u903b\u8f91\u548cjoin\u672c\u8eab\u5206\u79bb\u4e86\u3002 \u6240\u4ee5\u8bf4async\u51fd\u6570\u6839\u672c\u7684\u6267\u884c\u60c5\u51b5\u8fd8\u662f\u8981\u901a\u8fc7poll\u83b7\u53d6\u7684\u3002","title":"\u8ddf\u8e2a\u751f\u6210\u7684\u95ed\u5305"},{"location":"async-probe/#leaf-future","text":"__awaitee\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u627e\u5230.await\u751f\u6210\u7684\u7ed3\u6784\uff0c\u4f46\u4f1a\u5728\u4e00\u4e9b\u6ca1\u6709\u4f7f\u7528await\u7684Future\u5904\u65ad\u5f00\u3002\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u65ad\u5f00\u7684\u5730\u65b9\u80af\u5b9a\u662f\u4ee3\u7801\uff08\u800c\u4e0d\u662f\u7f16\u8bd1\u5668\u901a\u8fc7.await\uff09\u5b9e\u73b0\u4e86Future\u5bf9\u5e94\u7684poll\u51fd\u6570\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\"leaf\"\u7684poll\u51fd\u6570\u662f\u53ef\u4ee5\u76f4\u63a5\u63d2\u6869\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u9000\u4e00\u6b65\uff0c\u4e0d\u53bb\u81ea\u9876\u5411\u4e0b\u7684\u5173\u6ce8async\u51fd\u6570\u7684\u6574\u4f53\u6d41\u7a0b\uff0c\u800c\u662f\u89c2\u6d4b\u4e00\u4e9b\u5173\u952e\u7684poll\u51fd\u6570\u3002\u56e0\u4e3aasync\u771f\u6b63\u7684\u5f02\u6b65\u4e00\u822c\u90fd\u51fa\u73b0\u5728\u8fd9\u79cd\u5e95\u5c42Future\u91cc\uff0c\u8fd9\u6837\u8ddf\u8e2a\u5df2\u7ecf\u53ef\u4ee5\u83b7\u53d6\u8db3\u591f\u7684\u4fe1\u606f\u4e86\u3002 \u65e2\u7136\u6211\u4eec\u76f4\u63a5\u8ddf\u8e2a\u5177\u4f53\u5b9e\u73b0\u7684\u4e00\u4e2apoll\u51fd\u6570\uff0c\u63d2\u6869\u7684\u65f6\u5019\u5c31\u6ca1\u6709\u4e4b\u524d\u7684\u95ee\u9898\u4e86\u3002\u4e0d\u8fc7\u83b7\u53d6\u8fd4\u56de\u503c\u7684\u8bdd\u53ef\u80fd\u8fd8\u662f\u9700\u8981no_inline\u3002 \u800c\u5982\u679c\u5173\u6ce8\u7684\u4e0d\u662fFuture\u800c\u662fasync\u51fd\u6570\u672c\u8eab\u7684\u6267\u884c\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u51fd\u6570\u751f\u6210\u7684\u95ed\u5305\u4e0a\u63d2\u6869\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u7528line2addr\u5b9a\u4f4d\u5177\u4f53\u7684\u4e00\u53e5\u8bdd\u63d2\u6869\u3002","title":"\u4ec5\u8ddf\u8e2aleaf future"},{"location":"async-probe/#_4","text":"\u65e2\u7136\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u4e2astruct\u7684\u7ed3\u6784\uff0c\u5982\u679c\u80fd\u5728\u5806\u4e0a\u627e\u5230\u4ed6\u7684\u8bdd\u5c31\u53ef\u4ee5\u76f4\u63a5\u77e5\u9053async\u51fd\u6570\u7684\u6267\u884c\u60c5\u51b5\u4e86\u3002 \u8fd9\u4e48\u505a\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\uff1a\u53ef\u4ee5\u6839\u636estruct\u7684\u5730\u5740\u533a\u522b\u4e0d\u540c\u7684\u534f\u7a0b\u5b9e\u4f8b\uff0c\u66f4\u65b9\u4fbf\u7edf\u8ba1\u6267\u884c\u60c5\u51b5\u3002 \u6211\u80fd\u60f3\u5230\u7684\u65b9\u6cd5\u53ea\u6709\u7528jprobe\u6355\u83b7poll\u51fd\u6570\u7684\u5165\u53c2\uff0c\u4e0d\u8fc7\u8fd9\u4e5f\u662f\u5f88\u56f0\u96be\u7684\uff0c\u4e00\u662f\u4e4b\u524d\u8bf4\u7684async\u751f\u6210\u7684poll\u51fd\u6570\u5e76\u4e0d\u597d\u5b9a\u4f4d\uff0c\u4e8c\u662frust\u91cc\u9762\u7684jprobe\u770b\u8d77\u6765\u4f1a\u6bd4C\u7684\u5b9e\u73b0\u96be\u5f88\u591a\u3002","title":"\u6362\u4e00\u4e2a\u89d2\u5ea6"},{"location":"async-probe/#_5","text":"zCore\u4e2d\u7684SleepFuture\u7684poll\u51fd\u6570\u6ca1\u6709\u88abinline\uff0c\u76f4\u63a5\u53ef\u4ee5\u5728\u7b26\u53f7\u8868\u91cc\u627e\u5230 <kernel_hal::common::future::SleepFuture as core::future::future::Future>::poll \uff0c\u63d2\u6869\u4ee5\u540e\u53ef\u4ee5\u770b\u5230Waker\u89e6\u53d1\u524d\u540e\u4e24\u6b21poll\u5206\u522b\u8fd4\u56dePending\u548cReady\u3002","title":"\u4e00\u4e2a\u4f8b\u5b50"},{"location":"async-probe/#_6","text":"\u5982\u679c\u662f\u4f5c\u4e3adebug\u624b\u6bb5\u7684\u8bdd\uff0c\u7528async-backtrace\u8fd9\u4e2a\u5e93\u63d2\u5165\u9759\u6001\u8ffd\u8e2a\u70b9\u80af\u5b9a\u662f\u6700\u597d\u7684\u529e\u6cd5\u3002\u800c\u52a8\u6001\u8ddf\u8e2aasync\u51fd\u6570\u5177\u4f53\u7684\u6267\u884c\u60c5\u51b5\u60c5\u51b5\u6bd4\u8f83\u56f0\u96be\uff0c\u6839\u672c\u539f\u56e0\u662f\u7f16\u8bd1\u5668\u6ca1\u6709\u505a\u76f8\u5173\u7684debuginfo\u3002\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u89e3\u6790\u7f16\u8bd1\u5668emit\u7684awaitee\u4fe1\u606f\u627e\u5230\u627e\u5230leaf future\uff0c\u5b9a\u4f4d\u5176\u4e2d\u663e\u5f0f\u5b9e\u73b0\u7684poll\u51fd\u6570\uff0c\u5bf9\u8fd9\u4e9bpoll\u8fdb\u884cprobe\uff0c\u4e0e\u63d2\u6869closure\u7ed3\u5408\u5224\u65ad\u6267\u884c\u8fc7\u7a0b\u3002 \u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u770b\uff0c.await\u751f\u6210\u7684poll\u4f9d\u8d56\u5e76\u4e0d\u662fprobe\u52a8\u6001\u8ddf\u8e2a\u6700\u5173\u5fc3\u7684\u90e8\u5206\uff0c\u5173\u952e\u7684\u662f\u53ef\u80fd\u963b\u585e\u7684\u5e95\u5c42Future\u3002\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u5bf9await\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u52a8\u6001\u8ffd\u8e2a\uff08\u7f16\u8bd1\u5668\u76ee\u524d\u4e5f\u6ca1\u6709\u652f\u6301\uff09\uff0c\u5728debug\u7684\u65f6\u5019\u7528\u9759\u6001\u63d2\u6869\u5c31\u8db3\u591f\u4e86\u3002 \u5982\u679c\u771f\u7684\u8981\u505a\u5230\u5b8c\u6574\u7684\u52a8\u6001\u63d2\u6869\uff0c\u52a0\u5165\u7f16\u8bd1\u5668\u652f\u6301\u4ee5\u540e\u4f7f\u7528jprobe\u5e94\u8be5\u662f\u6700\u53ef\u884c\u7684\u505a\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\u6211\u4eec\u8981\u77e5\u9053async\u51fd\u6570\u751f\u6210\u7684Future\u91cc\u9762\u7684poll\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u5177\u4f53\u7684\u53c2\u6570\u7c7b\u578b\uff08\u72b6\u6001\u673a\u5bf9\u5e94\u7684struct\u7ed3\u6784\uff09\uff0c\u7136\u540e\u5728\u5bf9\u5e94\u7684\u5730\u5740\u63d2\u5165jprobe\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2astruct\uff0c\u4ece\u800c\u6bcf\u6b21poll\u4ee5\u540estruct\u66f4\u65b0\u7684\u72b6\u6001\u90fd\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u3002 \u73b0\u5728\u4e0d\u80fd\u5b9e\u73b0\u7684\u539f\u56e0\u662f\uff1a \u76ee\u524d\u8fd9\u4e2astruct\u7684\u7ed3\u6784\u53ea\u6709\u5728\u7f16\u8bd1\u540e\u624d\u53ef\u4ee5\u770b\u5230\uff0c\u53ef\u80fd\u8981\u7528\u522b\u7684\u624b\u6bb5\u5b9e\u73b0jprobe\u7684handler async\u51fd\u6570\u751f\u6210\u7684poll\u51fd\u6570\u7684\u5730\u5740\u5728debuginfo\u91cc\u9762\u4e0d\u592a\u597d\u627e\uff0c\u9700\u8981\u7f16\u8bd1\u5668\u652f\u6301 rust\u60f3\u8981\u5b9e\u73b0jprobe\u53ef\u80fd\u4f1a\u6bd4\u8f83\u590d\u6742\u3002 \u56e0\u4e3aasync rust\u5e76\u4e0d\u6210\u719f\uff0c\u76f8\u5173\u7684\u7f16\u8bd1\u6d41\u7a0b\u4ee5\u53cadebug\u652f\u6301\u90fd\u5728\u4e0d\u65ad\u7684\u6539\u8fdb\u4e2d\u3002debuginfo\u53ef\u4ee5\u5173\u6ce8tracking issue https://github.com/rust-lang/rust/issues/73522 \uff0casync\u51fd\u6570\u7684\u7f16\u8bd1\u8fc7\u7a0b\u6539\u8fdb\u53ef\u4ee5\u770b\u770b https://swatinem.de/blog/improving-async-codegen/ \u3002","title":"\u603b\u7ed3"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/ebpf/","text":"portable ebpf \u5b9e\u73b0 \u89c1 https://livingshade.github.io/ebpf-doc/","title":"portable ebpf \u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/ebpf/#portable-ebpf","text":"\u89c1 https://livingshade.github.io/ebpf-doc/","title":"portable ebpf \u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/zCore%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/","text":"zCore\u57fa\u7840\u8bbe\u65bd\u5b9e\u73b0 \u76f8\u5173\u4ee3\u7801\u5728 linux-object/src/dbginfo \u4e0e zircon-object/src/symbol \u4e2d\u3002 \u7b26\u53f7\u8868 \u4e3a\u4e86\u65b9\u4fbfkprobe\u7684\u6302\u8f7d\uff0c\u63d0\u4f9b\u4e86\u7528\u5185\u6838\u51fd\u6570\u7b26\u53f7\u6302\u8f7dkprobe\u7684\u529f\u80fd\uff0c\u901a\u8fc7\u5728\u7b26\u53f7\u8868\u4e2d\u67e5\u8be2\u5c06\u7b26\u53f7\u8f6c\u6362\u4e3a\u5730\u5740\u3002 \u539f\u672crCore\u4e2d\u662f\u7f16\u8bd1\u65f6\u76f4\u63a5\u5728\u5185\u6838elf\u4e2d\u9884\u7559\u51fa\u7a7a\u95f4\u5c06\u7b26\u53f7\u8868\u5199\u5165\u5185\u6838elf\u3002\u5728zCore\u7684\u5b9e\u73b0\u91cc\u6211\u4eec\u76f4\u63a5\u5c06\u7b26\u53f7\u8868\u6302\u8f7d\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f7f\u7528\uff0c\u66f4\u52a0\u65b9\u4fbf\u3002\uff08linux OS\u7684\u7b26\u53f7\u8868\u4f1a\u88ab\u653e\u5728 /proc/kallsyms \u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u65f6\u76f4\u63a5\u653e\u5728\u4e86\u6839\u76ee\u5f55\u4e0b\uff09 backtrace \u5c06rCore\u4e2d\u5229\u7528\u6808\u5e27backtrace\u7684\u5b9e\u73b0\u79fb\u690d\u5230zCore\u4e2d\uff0c\u5b9e\u73b0\u65f6\u6709\u4ee5\u4e0b\u51e0\u70b9\u6539\u52a8\uff1a \u7f16\u8bd1\u65f6\u5f3a\u5236\u52a0\u5165\u4e86 cargo.env(\"RUSTFLAGS\", \"-C force-frame-pointers=yes -C symbol-mangling-version=v0\"); \u7684flag\uff0crCore\u4f7f\u7528\u7684\u65e7\u7248flag\u4f3c\u4e4e\u4e0d\u7ba1\u7528\u4e86\u3002 \u539f\u672c\u7684backtrace\u662f\u901a\u8fc7\u7b26\u53f7\u8868\u67e5\u627e\u7b26\u53f7\u540d\u6253\u5370\uff0c\u6211\u4eec\u5728\u5185\u6838\u4e2d\u5f15\u5165\u4e86\u57fa\u4e8egimli\u5b9e\u73b0\u7684addr2line\uff0c\u5e76\u5c06zcore\u7684debuginfo\u62f7\u8d1d\u5230\u5185\u6838\u91cc\u8bfb\u53d6\uff0c\u4ece\u800c\u53ef\u4ee5\u6253\u5370\u51fa\u5b8c\u6574\u7684backtrace\uff0c\u5305\u62ec\u88abinline\u51fd\u6570\u7684\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u7684\u6587\u4ef6\u4f4d\u7f6e\u3002 notes \u5f15\u5165gimli\u5e93\u672c\u6765\u662f\u60f3\u7528debuginfo\u505aasync\u51fd\u6570\u76f8\u5173\u7684trace\uff0c\u4e0d\u8fc7\u540e\u9762\u53d1\u73b0\u8fd9\u90e8\u5206\u5de5\u4f5c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u5d4c\u5165\u5230\u5185\u6838\u91cc\u3002\u5982\u679c\u8981\u5206\u6790debuginfo\u505aline2addr\u4e4b\u7c7b\u7684\u4e8b\u60c5\u7684\u8bdd\u5b8c\u5168\u53ef\u4ee5\u5728\u5185\u6838\u5916\u9762\u505a\u5f97\u5230\u5730\u5740\u3002\u8be6\u7ec6\u7684backtrace\u4e5f\u53ef\u4ee5\u7528 https://github.com/rcore-os/rCore/blob/master/tools/addr2line.py \u7684\u65b9\u6cd5\u76f4\u63a5\u5728\u5916\u90e8\u5f97\u5230\u3002\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u786e\u6709\u4e00\u4e9b\u5197\u4f59\uff0c\u4e0d\u8fc7\u8fd9\u6837backtrace\u4f1a\u6bd4\u8f83\u65b9\u4fbf\u3002","title":"zCore\u57fa\u7840\u8bbe\u65bd\u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/zCore%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/#zcore","text":"\u76f8\u5173\u4ee3\u7801\u5728 linux-object/src/dbginfo \u4e0e zircon-object/src/symbol \u4e2d\u3002","title":"zCore\u57fa\u7840\u8bbe\u65bd\u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/zCore%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/#_1","text":"\u4e3a\u4e86\u65b9\u4fbfkprobe\u7684\u6302\u8f7d\uff0c\u63d0\u4f9b\u4e86\u7528\u5185\u6838\u51fd\u6570\u7b26\u53f7\u6302\u8f7dkprobe\u7684\u529f\u80fd\uff0c\u901a\u8fc7\u5728\u7b26\u53f7\u8868\u4e2d\u67e5\u8be2\u5c06\u7b26\u53f7\u8f6c\u6362\u4e3a\u5730\u5740\u3002 \u539f\u672crCore\u4e2d\u662f\u7f16\u8bd1\u65f6\u76f4\u63a5\u5728\u5185\u6838elf\u4e2d\u9884\u7559\u51fa\u7a7a\u95f4\u5c06\u7b26\u53f7\u8868\u5199\u5165\u5185\u6838elf\u3002\u5728zCore\u7684\u5b9e\u73b0\u91cc\u6211\u4eec\u76f4\u63a5\u5c06\u7b26\u53f7\u8868\u6302\u8f7d\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f7f\u7528\uff0c\u66f4\u52a0\u65b9\u4fbf\u3002\uff08linux OS\u7684\u7b26\u53f7\u8868\u4f1a\u88ab\u653e\u5728 /proc/kallsyms \u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u65f6\u76f4\u63a5\u653e\u5728\u4e86\u6839\u76ee\u5f55\u4e0b\uff09","title":"\u7b26\u53f7\u8868"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/zCore%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/#backtrace","text":"\u5c06rCore\u4e2d\u5229\u7528\u6808\u5e27backtrace\u7684\u5b9e\u73b0\u79fb\u690d\u5230zCore\u4e2d\uff0c\u5b9e\u73b0\u65f6\u6709\u4ee5\u4e0b\u51e0\u70b9\u6539\u52a8\uff1a \u7f16\u8bd1\u65f6\u5f3a\u5236\u52a0\u5165\u4e86 cargo.env(\"RUSTFLAGS\", \"-C force-frame-pointers=yes -C symbol-mangling-version=v0\"); \u7684flag\uff0crCore\u4f7f\u7528\u7684\u65e7\u7248flag\u4f3c\u4e4e\u4e0d\u7ba1\u7528\u4e86\u3002 \u539f\u672c\u7684backtrace\u662f\u901a\u8fc7\u7b26\u53f7\u8868\u67e5\u627e\u7b26\u53f7\u540d\u6253\u5370\uff0c\u6211\u4eec\u5728\u5185\u6838\u4e2d\u5f15\u5165\u4e86\u57fa\u4e8egimli\u5b9e\u73b0\u7684addr2line\uff0c\u5e76\u5c06zcore\u7684debuginfo\u62f7\u8d1d\u5230\u5185\u6838\u91cc\u8bfb\u53d6\uff0c\u4ece\u800c\u53ef\u4ee5\u6253\u5370\u51fa\u5b8c\u6574\u7684backtrace\uff0c\u5305\u62ec\u88abinline\u51fd\u6570\u7684\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u7684\u6587\u4ef6\u4f4d\u7f6e\u3002","title":"backtrace"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/zCore%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/#notes","text":"\u5f15\u5165gimli\u5e93\u672c\u6765\u662f\u60f3\u7528debuginfo\u505aasync\u51fd\u6570\u76f8\u5173\u7684trace\uff0c\u4e0d\u8fc7\u540e\u9762\u53d1\u73b0\u8fd9\u90e8\u5206\u5de5\u4f5c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u5d4c\u5165\u5230\u5185\u6838\u91cc\u3002\u5982\u679c\u8981\u5206\u6790debuginfo\u505aline2addr\u4e4b\u7c7b\u7684\u4e8b\u60c5\u7684\u8bdd\u5b8c\u5168\u53ef\u4ee5\u5728\u5185\u6838\u5916\u9762\u505a\u5f97\u5230\u5730\u5740\u3002\u8be6\u7ec6\u7684backtrace\u4e5f\u53ef\u4ee5\u7528 https://github.com/rcore-os/rCore/blob/master/tools/addr2line.py \u7684\u65b9\u6cd5\u76f4\u63a5\u5728\u5916\u90e8\u5f97\u5230\u3002\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u786e\u6709\u4e00\u4e9b\u5197\u4f59\uff0c\u4e0d\u8fc7\u8fd9\u6837backtrace\u4f1a\u6bd4\u8f83\u65b9\u4fbf\u3002","title":"notes"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/","text":"portable kprobe\u5b9e\u73b0 \u7b80\u4ecb https://github.com/livingshade/rCore-eBPF-enhancement/tree/master \u57fa\u4e8e https://github.com/latte-c/rCore/tree/bpf/kernel \u5b9e\u73b0\uff0c\u57fa\u672c\u539f\u7406\u76f8\u540c\uff0c\u89c1\u6587\u6863 https://github.com/latte-c/rCore/tree/bpf/kernel/docs \u3002 \u79fb\u690d\u65b9\u6cd5 \u89c1\u4ed3\u5e93\u4e2dREADME.md\u4ee5\u53ca\u540e\u7eed\u6587\u6863\u7684\u51e0\u4e2a\u4f8b\u5b50\u3002 \u5b9e\u73b0\u6539\u8fdb \u76f8\u6bd4\u4e8e\u539f\u672c\u7684\u7248\u672c\u505a\u4e86\u4ee5\u4e0b\u6539\u8fdb\uff1a \u6587\u6863 \u6dfb\u52a0\u4e86\u66f4\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u5305\u542b\u51fd\u6570\u7684\u5177\u4f53\u6267\u884c\u903b\u8f91\uff0c\u7528cargo docs\u98ce\u683c\u5199\u5728\u4ee3\u7801\u5185\uff0c\u66f4\u65b9\u4fbf\u9605\u8bfb\u3002 \u6a21\u5757\u5316 \u5c06os\u76f8\u5173\u7684\u90e8\u5206\u5206\u79bb\u81f3\u5355\u72ec\u7684\u6a21\u5757\u4e2d\u65b9\u4fbf\u79fb\u690d\uff0c\u5e76\u79fb\u690d\u5230zCore\uff0crCore-Tutorial\u4e2d\u65b9\u4fbf\u540e\u7eed\u5f00\u53d1\uff08\u56e0\u4e3arCore\u4e0d\u518d\u88ab\u7ef4\u62a4\uff09\u3002\u6d4b\u8bd5\u7528\u4f8b\u4e5f\u5206\u79bb\u5230\u4e86\u5355\u72ec\u7684\u6a21\u5757\u4e2d\u3002 \u76f8\u6bd4\u4e8e\u4e4b\u524d\u4f7f\u7528crate\u7684\u6a21\u5757\u5316\u5b9e\u73b0 https://github.com/hm1229/rkprobes \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u6dfb\u52a0\u4e86\u5bf9Trapframe\u6a21\u5757\u7684\u62bd\u8c61\uff0c\u4e0d\u5f3a\u5236OS\u4f7f\u7528\u540c\u4e00\u4e2aTrapframe\u5e93\u3002 \u6307\u4ee4\u7f13\u5b58\u4e2d\u9009\u62e9\u8ba9OS\u63d0\u4f9b\u9875\u5206\u914d\u63a5\u53e3\u800c\u4e0d\u662f\u76f4\u63a5\u5b58\u50a8\u5728Kprobes\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u65b9\u4fbfOS\u5355\u72ec\u8bbe\u7f6e\u76f8\u5173\u9875\u7684\u6743\u9650\u3002 \u7531\u4e8e\u548cOS\u8026\u5408\u6027\u8f83\u5f3a\u800c\u6ca1\u6709\u4f7f\u7528crate\uff0c\u9009\u62e9\u5c06OS\u76f8\u5173\u4ee3\u7801\u62bd\u8c61\u51fa\u6765\u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u79fb\u690d\u3002","title":"portable kprobe\u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#portable-kprobe","text":"","title":"portable kprobe\u5b9e\u73b0"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#_1","text":"https://github.com/livingshade/rCore-eBPF-enhancement/tree/master \u57fa\u4e8e https://github.com/latte-c/rCore/tree/bpf/kernel \u5b9e\u73b0\uff0c\u57fa\u672c\u539f\u7406\u76f8\u540c\uff0c\u89c1\u6587\u6863 https://github.com/latte-c/rCore/tree/bpf/kernel/docs \u3002","title":"\u7b80\u4ecb"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#_2","text":"\u89c1\u4ed3\u5e93\u4e2dREADME.md\u4ee5\u53ca\u540e\u7eed\u6587\u6863\u7684\u51e0\u4e2a\u4f8b\u5b50\u3002","title":"\u79fb\u690d\u65b9\u6cd5"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#_3","text":"\u76f8\u6bd4\u4e8e\u539f\u672c\u7684\u7248\u672c\u505a\u4e86\u4ee5\u4e0b\u6539\u8fdb\uff1a","title":"\u5b9e\u73b0\u6539\u8fdb"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#_4","text":"\u6dfb\u52a0\u4e86\u66f4\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u5305\u542b\u51fd\u6570\u7684\u5177\u4f53\u6267\u884c\u903b\u8f91\uff0c\u7528cargo docs\u98ce\u683c\u5199\u5728\u4ee3\u7801\u5185\uff0c\u66f4\u65b9\u4fbf\u9605\u8bfb\u3002","title":"\u6587\u6863"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E5%AE%9E%E7%8E%B0/#_5","text":"\u5c06os\u76f8\u5173\u7684\u90e8\u5206\u5206\u79bb\u81f3\u5355\u72ec\u7684\u6a21\u5757\u4e2d\u65b9\u4fbf\u79fb\u690d\uff0c\u5e76\u79fb\u690d\u5230zCore\uff0crCore-Tutorial\u4e2d\u65b9\u4fbf\u540e\u7eed\u5f00\u53d1\uff08\u56e0\u4e3arCore\u4e0d\u518d\u88ab\u7ef4\u62a4\uff09\u3002\u6d4b\u8bd5\u7528\u4f8b\u4e5f\u5206\u79bb\u5230\u4e86\u5355\u72ec\u7684\u6a21\u5757\u4e2d\u3002 \u76f8\u6bd4\u4e8e\u4e4b\u524d\u4f7f\u7528crate\u7684\u6a21\u5757\u5316\u5b9e\u73b0 https://github.com/hm1229/rkprobes \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u6dfb\u52a0\u4e86\u5bf9Trapframe\u6a21\u5757\u7684\u62bd\u8c61\uff0c\u4e0d\u5f3a\u5236OS\u4f7f\u7528\u540c\u4e00\u4e2aTrapframe\u5e93\u3002 \u6307\u4ee4\u7f13\u5b58\u4e2d\u9009\u62e9\u8ba9OS\u63d0\u4f9b\u9875\u5206\u914d\u63a5\u53e3\u800c\u4e0d\u662f\u76f4\u63a5\u5b58\u50a8\u5728Kprobes\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u65b9\u4fbfOS\u5355\u72ec\u8bbe\u7f6e\u76f8\u5173\u9875\u7684\u6743\u9650\u3002 \u7531\u4e8e\u548cOS\u8026\u5408\u6027\u8f83\u5f3a\u800c\u6ca1\u6709\u4f7f\u7528crate\uff0c\u9009\u62e9\u5c06OS\u76f8\u5173\u4ee3\u7801\u62bd\u8c61\u51fa\u6765\u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u79fb\u690d\u3002","title":"\u6a21\u5757\u5316"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E7%A7%BB%E6%A4%8DrCore-Tutorial/","text":"\u79fb\u690drCore-Tutorial\u7684\u4f8b\u5b50 https://github.com/cubele/rCore-Tutorial-Code-2022A/tree/main/os8 \u628aprobe\u6a21\u5757\u590d\u5236\u5230 os8/src \u4e0b\uff0c\u5728 main.rs \u5f15\u5165\u6a21\u5757\u5e76\u52a0\u5165\u4ed3\u5e93\u91cc\u5199\u7684dependency\uff1a [dependencies] lazy_static = { version = \"1.4\", features = [\"spin_no_std\"] } lock = { git = \"https://github.com/DeathWish5/kernel-sync\", rev = \"8486b8\" } riscv-decode = { git = \"https://github.com/latte-c/riscv-decode\", rev = \"bc8da4e\" } \u66f4\u6539 probe/osutils.rs \uff0c\u9700\u8981\u5c06\u91cc\u9762\u7684\u5de5\u5177\u6839\u636eTutorial\u91cd\u5199\uff1a PAGE_SIZE\uff1a pub const PAGE_SIZE: usize = crate::config::PAGE_SIZE; \u9875\u5206\u914d\u51fd\u6570\uff1a /// Allocate a page of memory, return virtual address /// The page need to be readable and executable by user, and writable by kernel pub fn alloc_page() -> usize { let pa = raw_frame_alloc().unwrap().into(); let va = pa; // identity mapping in kernel va } /// Deallocate a page of memory from virtual address pub fn dealloc_page(va: usize) { let pa = va; raw_frame_dealloc(pa.into()); } \u56e0\u4e3atutorial\u4e2d\u4f7f\u7528frame\u7684\u751f\u547d\u5468\u671f\u5b9e\u73b0dealloc\uff0c\u548cprobe\u91cc\u9762\u624b\u5199\u7684Drop\u65e0\u6cd5\u517c\u5bb9\uff0c\u6240\u4ee5\u9700\u8981\u5199\u4e24\u4e2araw\u51fd\u6570\uff1a pub fn raw_frame_alloc() -> Option<PhysAddr> { FRAME_ALLOCATOR.exclusive_access().alloc().map(|ppn| ppn.into()) } pub fn raw_frame_dealloc(pa: PhysAddr) { FRAME_ALLOCATOR.exclusive_access().dealloc(pa.into()); } \u76f4\u63a5\u8fd4\u56de\u5730\u5740\u800c\u4e0d\u6620\u5c04\u5230FrameTracker\uff0c\u517c\u5bb9probe\u91cc\u7684\u9875\u7ba1\u7406\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\uff08\u5efa\u8bae\uff09\u4fee\u6539probe\u91cc\u7684\u6570\u636e\u7ed3\u6784\u4f7f\u7528\u7edf\u4e00\u98ce\u683c\u7ba1\u7406\u3002 \u6ce8\u610f\u5206\u914d\u7684\u9875\u9700\u8981\u6709\u5185\u6838RWX\u6743\u9650\uff0c\u76ee\u524d\u4e3a\u4e86\u65b9\u4fbf\uff0c\u76f4\u63a5\u5728new_kernel()\u51fd\u6570\u521d\u59cb\u5316\u65f6\u5168\u5c40\u66f4\u6539\u4e86\u7269\u7406\u5185\u5b58\u533a\u57df\u7684\u6743\u9650\uff0c\u7406\u8bba\u4e0a\u53ea\u9700\u8981\u7ed9\u5206\u914d\u7684\u9875\u6743\u9650 \u5185\u6838\u7684\u5185\u5b58\u590d\u5236\u51fd\u6570\uff08\u5176\u5b9e\u8fd9\u4e2a\u51fd\u6570\u548cOS\u65e0\u5173\uff09\uff1a /// Copy memory from src to dst, uses virtual address in kernel pub fn byte_copy(dst_addr: usize, src_addr: usize, len: usize) { let dst = dst_addr as *mut u8; let src = src_addr as *const u8; unsafe { core::ptr::copy(src, dst, len); } } \u56e0\u4e3aTutorial\u6ca1\u6709\u4f7f\u7528Trapframe\u5e93\uff0c\u9700\u8981wrap\u4e00\u4e0bTrapframe\uff0c\u66f4\u6539 probe/arch/riscv/trapframe.rs \uff1a pub use crate::trap::TrapContext as TrapFrame; pub fn get_trapframe_pc(tf: &TrapFrame) -> usize { tf.sepc } pub fn set_trapframe_pc(tf: &mut TrapFrame, pc: usize) { tf.sepc = pc; } pub fn get_trapframe_ra(tf: &TrapFrame) -> usize { tf.x[1] } pub fn set_trapframe_ra(tf: &mut TrapFrame, ra: usize) { tf.x[1] = ra; } pub fn get_reg(tf: &TrapFrame, reg: u32) -> usize { let index = reg as usize; if index != 0 { tf.x[index] } else { 0 } } pub fn set_reg(tf: &mut TrapFrame, reg: u32, val: usize) { let index = reg as usize; if index != 0 { tf.x[index] = val; } } \u5c06Tutorial\u81ea\u5df1\u7684Trapcontext\u5305\u88c5\u4e3aTrapframe\uff0c\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\u3002 \u7531\u4e8eprobe\u9700\u8981\u66ff\u6362\u6307\u4ee4\uff0c.text\u6bb5\u7684\u6743\u9650\u4e5f\u8981\u6539\u4e3aRWX\uff0c\u5728new_kernel()\u51fd\u6570\u91cc\u4fee\u6539\u5373\u53ef\u3002 \u5728ebreak\u4e2dS->S\u7684trap\u51fd\u6570\u91cc\u8c03\u7528\u51fd\u6570 kprobes_breakpoint_handler \uff1a #[no_mangle] pub fn trap_from_kernel(_trap_cx: &TrapContext) { let scause = scause::read(); let stval = stval::read(); match scause.cause() { Trap::Exception(Exception::Breakpoint) => { println!(\"[kernel] breakpoint at {:#x}\", _trap_cx.sepc); unsafe {kprobes_breakpoint_handler(_trap_cx);} } _ => { panic!( \"Unsupported trap from kernel: {:?}, stval = {:#x}!\", scause.cause(), stval ); } } } 2022A\u7684Tutorial\u6ca1\u6709\u5b9e\u73b0S->S\u7684trap\uff0c\u9700\u8981\u4ece https://github.com/rcore-os/rCore-Tutorial-v3/tree/main/os/src/trap \u91cc\u590d\u5236\u8fc7\u6765\u3002 \u5728main\u51fd\u6570\u521d\u59cb\u5316\u5b8c\u6210\u540e\u8c03\u7528 probe::run_tests(); \u5373\u53ef\u6d4b\u8bd5\u3002 \u79fb\u690d\u5b8c\u6bd5\u540e\u76f8\u5173\u7684syscall\u53ef\u4ee5\u901a\u8fc7 probe \u6a21\u5757\u91cc\u7684\u63a5\u53e3\u51fd\u6570\u5b9e\u73b0\u3002\u53ef\u4ee5\u53c2\u8003\u540e\u7eedeBPF\u79fb\u690d\u65f6syscall\u7684\u5b9e\u73b0\u3002 \u5982\u679c\u8981\u5b9e\u73b0\u901a\u8fc7\u7b26\u53f7\u6ce8\u518cprobe\u7684\u8bdd\u9700\u8981\u5f15\u5165\u5185\u6838\u7684\u7b26\u53f7\u8868\u5e76\u5728 osutils \u4e2d\u63d0\u4f9b\u7b26\u53f7\u8f6c\u5730\u5740\u7684\u51fd\u6570\uff0c\u5b9e\u73b0\u4ee5\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 register_kprobe_with_symbol \u7684\u63a5\u53e3\u3002","title":"\u79fb\u690drCore-Tutorial\u7684\u4f8b\u5b50"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E7%A7%BB%E6%A4%8DrCore-Tutorial/#rcore-tutorial","text":"https://github.com/cubele/rCore-Tutorial-Code-2022A/tree/main/os8 \u628aprobe\u6a21\u5757\u590d\u5236\u5230 os8/src \u4e0b\uff0c\u5728 main.rs \u5f15\u5165\u6a21\u5757\u5e76\u52a0\u5165\u4ed3\u5e93\u91cc\u5199\u7684dependency\uff1a [dependencies] lazy_static = { version = \"1.4\", features = [\"spin_no_std\"] } lock = { git = \"https://github.com/DeathWish5/kernel-sync\", rev = \"8486b8\" } riscv-decode = { git = \"https://github.com/latte-c/riscv-decode\", rev = \"bc8da4e\" } \u66f4\u6539 probe/osutils.rs \uff0c\u9700\u8981\u5c06\u91cc\u9762\u7684\u5de5\u5177\u6839\u636eTutorial\u91cd\u5199\uff1a PAGE_SIZE\uff1a pub const PAGE_SIZE: usize = crate::config::PAGE_SIZE; \u9875\u5206\u914d\u51fd\u6570\uff1a /// Allocate a page of memory, return virtual address /// The page need to be readable and executable by user, and writable by kernel pub fn alloc_page() -> usize { let pa = raw_frame_alloc().unwrap().into(); let va = pa; // identity mapping in kernel va } /// Deallocate a page of memory from virtual address pub fn dealloc_page(va: usize) { let pa = va; raw_frame_dealloc(pa.into()); } \u56e0\u4e3atutorial\u4e2d\u4f7f\u7528frame\u7684\u751f\u547d\u5468\u671f\u5b9e\u73b0dealloc\uff0c\u548cprobe\u91cc\u9762\u624b\u5199\u7684Drop\u65e0\u6cd5\u517c\u5bb9\uff0c\u6240\u4ee5\u9700\u8981\u5199\u4e24\u4e2araw\u51fd\u6570\uff1a pub fn raw_frame_alloc() -> Option<PhysAddr> { FRAME_ALLOCATOR.exclusive_access().alloc().map(|ppn| ppn.into()) } pub fn raw_frame_dealloc(pa: PhysAddr) { FRAME_ALLOCATOR.exclusive_access().dealloc(pa.into()); } \u76f4\u63a5\u8fd4\u56de\u5730\u5740\u800c\u4e0d\u6620\u5c04\u5230FrameTracker\uff0c\u517c\u5bb9probe\u91cc\u7684\u9875\u7ba1\u7406\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\uff08\u5efa\u8bae\uff09\u4fee\u6539probe\u91cc\u7684\u6570\u636e\u7ed3\u6784\u4f7f\u7528\u7edf\u4e00\u98ce\u683c\u7ba1\u7406\u3002 \u6ce8\u610f\u5206\u914d\u7684\u9875\u9700\u8981\u6709\u5185\u6838RWX\u6743\u9650\uff0c\u76ee\u524d\u4e3a\u4e86\u65b9\u4fbf\uff0c\u76f4\u63a5\u5728new_kernel()\u51fd\u6570\u521d\u59cb\u5316\u65f6\u5168\u5c40\u66f4\u6539\u4e86\u7269\u7406\u5185\u5b58\u533a\u57df\u7684\u6743\u9650\uff0c\u7406\u8bba\u4e0a\u53ea\u9700\u8981\u7ed9\u5206\u914d\u7684\u9875\u6743\u9650 \u5185\u6838\u7684\u5185\u5b58\u590d\u5236\u51fd\u6570\uff08\u5176\u5b9e\u8fd9\u4e2a\u51fd\u6570\u548cOS\u65e0\u5173\uff09\uff1a /// Copy memory from src to dst, uses virtual address in kernel pub fn byte_copy(dst_addr: usize, src_addr: usize, len: usize) { let dst = dst_addr as *mut u8; let src = src_addr as *const u8; unsafe { core::ptr::copy(src, dst, len); } } \u56e0\u4e3aTutorial\u6ca1\u6709\u4f7f\u7528Trapframe\u5e93\uff0c\u9700\u8981wrap\u4e00\u4e0bTrapframe\uff0c\u66f4\u6539 probe/arch/riscv/trapframe.rs \uff1a pub use crate::trap::TrapContext as TrapFrame; pub fn get_trapframe_pc(tf: &TrapFrame) -> usize { tf.sepc } pub fn set_trapframe_pc(tf: &mut TrapFrame, pc: usize) { tf.sepc = pc; } pub fn get_trapframe_ra(tf: &TrapFrame) -> usize { tf.x[1] } pub fn set_trapframe_ra(tf: &mut TrapFrame, ra: usize) { tf.x[1] = ra; } pub fn get_reg(tf: &TrapFrame, reg: u32) -> usize { let index = reg as usize; if index != 0 { tf.x[index] } else { 0 } } pub fn set_reg(tf: &mut TrapFrame, reg: u32, val: usize) { let index = reg as usize; if index != 0 { tf.x[index] = val; } } \u5c06Tutorial\u81ea\u5df1\u7684Trapcontext\u5305\u88c5\u4e3aTrapframe\uff0c\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\u3002 \u7531\u4e8eprobe\u9700\u8981\u66ff\u6362\u6307\u4ee4\uff0c.text\u6bb5\u7684\u6743\u9650\u4e5f\u8981\u6539\u4e3aRWX\uff0c\u5728new_kernel()\u51fd\u6570\u91cc\u4fee\u6539\u5373\u53ef\u3002 \u5728ebreak\u4e2dS->S\u7684trap\u51fd\u6570\u91cc\u8c03\u7528\u51fd\u6570 kprobes_breakpoint_handler \uff1a #[no_mangle] pub fn trap_from_kernel(_trap_cx: &TrapContext) { let scause = scause::read(); let stval = stval::read(); match scause.cause() { Trap::Exception(Exception::Breakpoint) => { println!(\"[kernel] breakpoint at {:#x}\", _trap_cx.sepc); unsafe {kprobes_breakpoint_handler(_trap_cx);} } _ => { panic!( \"Unsupported trap from kernel: {:?}, stval = {:#x}!\", scause.cause(), stval ); } } } 2022A\u7684Tutorial\u6ca1\u6709\u5b9e\u73b0S->S\u7684trap\uff0c\u9700\u8981\u4ece https://github.com/rcore-os/rCore-Tutorial-v3/tree/main/os/src/trap \u91cc\u590d\u5236\u8fc7\u6765\u3002 \u5728main\u51fd\u6570\u521d\u59cb\u5316\u5b8c\u6210\u540e\u8c03\u7528 probe::run_tests(); \u5373\u53ef\u6d4b\u8bd5\u3002 \u79fb\u690d\u5b8c\u6bd5\u540e\u76f8\u5173\u7684syscall\u53ef\u4ee5\u901a\u8fc7 probe \u6a21\u5757\u91cc\u7684\u63a5\u53e3\u51fd\u6570\u5b9e\u73b0\u3002\u53ef\u4ee5\u53c2\u8003\u540e\u7eedeBPF\u79fb\u690d\u65f6syscall\u7684\u5b9e\u73b0\u3002 \u5982\u679c\u8981\u5b9e\u73b0\u901a\u8fc7\u7b26\u53f7\u6ce8\u518cprobe\u7684\u8bdd\u9700\u8981\u5f15\u5165\u5185\u6838\u7684\u7b26\u53f7\u8868\u5e76\u5728 osutils \u4e2d\u63d0\u4f9b\u7b26\u53f7\u8f6c\u5730\u5740\u7684\u51fd\u6570\uff0c\u5b9e\u73b0\u4ee5\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528 register_kprobe_with_symbol \u7684\u63a5\u53e3\u3002","title":"\u79fb\u690drCore-Tutorial\u7684\u4f8b\u5b50"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E7%A7%BB%E6%A4%8DzCore/","text":"\u79fb\u690dzCore https://github.com/cubele/zCore \u4e3a\u4e86\u65b9\u4fbf\uff0c\u9875\u8868\u7684\u6743\u9650\u662f\u76f4\u63a5\u4fee\u6539 kernel-hal/src/bare/arch/riscv/vm.rs \u5b9e\u73b0\u7684\uff0c\u6ca1\u6709\u5bf9\u5206\u914d\u7684\u9875\u5355\u72ec\u64cd\u4f5c\u3002 \u540c\u65f6\u8fd8\u52a0\u5165\u4e86\u7b26\u53f7\u8868\u7b49\u57fa\u7840\u8bbe\u65bd\uff0c\u89c1 zCore\u57fa\u7840\u8bbe\u65bd \u3002","title":"\u79fb\u690dzCore"},{"location":"ebpf%E7%A7%BB%E6%A4%8D/kprobes/%E7%A7%BB%E6%A4%8DzCore/#zcore","text":"https://github.com/cubele/zCore \u4e3a\u4e86\u65b9\u4fbf\uff0c\u9875\u8868\u7684\u6743\u9650\u662f\u76f4\u63a5\u4fee\u6539 kernel-hal/src/bare/arch/riscv/vm.rs \u5b9e\u73b0\u7684\uff0c\u6ca1\u6709\u5bf9\u5206\u914d\u7684\u9875\u5355\u72ec\u64cd\u4f5c\u3002 \u540c\u65f6\u8fd8\u52a0\u5165\u4e86\u7b26\u53f7\u8868\u7b49\u57fa\u7840\u8bbe\u65bd\uff0c\u89c1 zCore\u57fa\u7840\u8bbe\u65bd \u3002","title":"\u79fb\u690dzCore"}]}